- a mechanics to store node address (i.e. ask bootstrap node & register_nodes)
- check consensus (i.e. trigger /nodes/resolve)
- proof-of-play (i.e. a script has counter that send match data time to time to blockchain (triggering new_match()), proof_of_play() self check when match number > some numbers, trigger blockchain.proof_of_play())
- tell everyone it knows that this is the match result (in proof_of_play(), for each node, trigger /nodes/resolve, after new block has been added)
- need to parallel two other functions: broadcasting results & check results


block interval?????
use collective proof-of-play: if all collected players score = certain score --> block write
eliminate problem of infinite fork
can control difficulty by adjusting certain score